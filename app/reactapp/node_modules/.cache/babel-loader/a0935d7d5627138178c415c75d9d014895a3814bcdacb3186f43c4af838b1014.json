{"ast":null,"code":"/*\n * sqlite.ios.core.js\n *\n * Created by Andrzej Porebski on 10/29/15.\n * Copyright (c) 2015-2016 Andrzej Porebski.\n *\n * This software is largely based on the SQLLite Storage Cordova Plugin created by Chris Brody & Davide Bertola.\n * The implementation was adopted and converted to use React Native bindings.\n *\n * See https://github.com/litehelpers/Cordova-sqlite-storage\n *\n * This library is available under the terms of the MIT License (2008).\n * See http://opensource.org/licenses/alphabetical for full text.\n */\n\nvar NativeModules = require(\"react-native\").NativeModules;\nvar DB_STATE_INIT, DB_STATE_OPEN, READ_ONLY_REGEX, SQLiteFactory, SQLitePlugin, SQLitePluginTransaction, argsArray, dblocations, newSQLError, txLocks;\nvar plugin = {};\nREAD_ONLY_REGEX = /^(\\s|;)*(?:alter|create|delete|drop|insert|reindex|replace|update)/i;\nDB_STATE_INIT = \"INIT\";\nDB_STATE_OPEN = \"OPEN\";\ntxLocks = {};\nnewSQLError = function (error, code) {\n  var sqlError;\n  sqlError = error;\n  if (!code) {\n    code = 0;\n  }\n  if (!sqlError) {\n    sqlError = new Error(\"a plugin had an error but provided no response\");\n    sqlError.code = code;\n  }\n  if (typeof sqlError === \"string\") {\n    sqlError = new Error(error);\n    sqlError.code = code;\n  }\n  if (!sqlError.code && sqlError.message) {\n    sqlError.code = code;\n  }\n  if (!sqlError.code && !sqlError.message) {\n    sqlError = new Error(\"an unknown error was returned: \" + JSON.stringify(sqlError));\n    sqlError.code = code;\n  }\n  return sqlError;\n};\nlet nextTick = setImmediate || function (fun) {\n  setTimeout(fun, 0);\n};\nif (global.window) {\n  nextTick = window.setImmediate || function (fun) {\n    window.setTimeout(fun, 0);\n  };\n}\n\n/*\n Utility that avoids leaking the arguments object. See\n https://www.npmjs.org/package/argsarray\n */\n\nargsArray = function (fun) {\n  return function () {\n    var args, i, len;\n    len = arguments.length;\n    if (len) {\n      args = [];\n      i = -1;\n      while (++i < len) {\n        args[i] = arguments[i];\n      }\n      return fun.call(this, args);\n    } else {\n      return fun.call(this, []);\n    }\n  };\n};\nplugin.exec = function (method, options, success, error) {\n  if (plugin.sqlitePlugin.DEBUG) {\n    plugin.log(\"SQLite.\" + method + \"(\" + JSON.stringify(options) + \")\");\n  }\n  NativeModules[\"SQLite\"][method](options, success, error);\n};\nplugin.log = function (...messages) {\n  if (plugin.sqlitePlugin.DEBUG) {\n    console.log(...messages);\n  }\n};\nplugin.warn = function (...messages) {\n  console.warn(...messages);\n};\nplugin.error = function (...messages) {\n  console.error(...messages);\n};\nSQLitePlugin = function (openargs, openSuccess, openError) {\n  var dbname;\n  if (!(openargs && openargs[\"name\"])) {\n    throw newSQLError(\"Cannot create a SQLitePlugin db instance without a db name\");\n  }\n  dbname = openargs.name;\n  if (typeof dbname !== \"string\") {\n    throw newSQLError(\"sqlite plugin database name must be a string\");\n  }\n  this.openargs = openargs;\n  this.dbname = dbname;\n  this.openSuccess = openSuccess;\n  this.openError = openError;\n  this.openSuccess || (this.openSuccess = function () {\n    plugin.log(\"DB opened: \" + dbname);\n  });\n  this.openError || (this.openError = function (e) {\n    plugin.log(e.message);\n  });\n  this.open(this.openSuccess, this.openError);\n};\nSQLitePlugin.prototype.databaseFeatures = {\n  isSQLitePluginDatabase: true\n};\nSQLitePlugin.prototype.openDBs = {};\nSQLitePlugin.prototype.addTransaction = function (t) {\n  if (!txLocks[this.dbname]) {\n    txLocks[this.dbname] = {\n      queue: [],\n      inProgress: false\n    };\n  }\n  txLocks[this.dbname].queue.push(t);\n  if (this.dbname in this.openDBs && this.openDBs[this.dbname] !== DB_STATE_INIT) {\n    this.startNextTransaction();\n  } else {\n    if (this.dbname in this.openDBs) {\n      plugin.log(\"new transaction is waiting for open operation\");\n    } else {\n      plugin.log(\"database is closed, new transaction is [stuck] waiting until db is opened again!\");\n    }\n  }\n};\nSQLitePlugin.prototype.transaction = function (fn, error, success) {\n  if (!this.openDBs[this.dbname]) {\n    error(newSQLError(\"database not open\"));\n    return;\n  }\n  this.addTransaction(new SQLitePluginTransaction(this, fn, error, success, true, false));\n};\nSQLitePlugin.prototype.readTransaction = function (fn, error, success) {\n  if (!this.openDBs[this.dbname]) {\n    error(newSQLError(\"database not open\"));\n    return;\n  }\n  this.addTransaction(new SQLitePluginTransaction(this, fn, error, success, false, true));\n};\nSQLitePlugin.prototype.startNextTransaction = function () {\n  var self;\n  self = this;\n  nextTick(function (_this) {\n    return function () {\n      var txLock;\n      if (!(_this.dbname in _this.openDBs) || _this.openDBs[_this.dbname] !== DB_STATE_OPEN) {\n        plugin.log(\"cannot start next transaction: database not open\");\n        return;\n      }\n      txLock = txLocks[self.dbname];\n      if (!txLock) {\n        plugin.log(\"cannot start next transaction: database connection is lost\");\n      } else if (txLock.queue.length > 0 && !txLock.inProgress) {\n        txLock.inProgress = true;\n        txLock.queue.shift().start();\n      }\n    };\n  }(this));\n};\nSQLitePlugin.prototype.abortAllPendingTransactions = function () {\n  var j, len1, ref, tx, txLock;\n  txLock = txLocks[this.dbname];\n  if (!!txLock && txLock.queue.length > 0) {\n    ref = txLock.queue;\n    for (j = 0, len1 = ref.length; j < len1; j++) {\n      tx = ref[j];\n      tx.abortFromQ(newSQLError(\"Invalid database handle\"));\n    }\n    txLock.queue = [];\n    txLock.inProgress = false;\n  }\n};\nSQLitePlugin.prototype.sqlBatch = function (sqlStatements, success, error) {\n  var batchList, j, len1, myfn, st;\n  if (!sqlStatements || sqlStatements.constructor !== Array) {\n    throw newSQLError(\"sqlBatch expects an array\");\n  }\n  batchList = [];\n  for (j = 0, len1 = sqlStatements.length; j < len1; j++) {\n    st = sqlStatements[j];\n    if (st.constructor === Array) {\n      if (st.length === 0) {\n        throw newSQLError(\"sqlBatch array element of zero (0) length\");\n      }\n      batchList.push({\n        sql: st[0],\n        params: st.length === 0 ? [] : st[1]\n      });\n    } else {\n      batchList.push({\n        sql: st,\n        params: []\n      });\n    }\n  }\n  myfn = function (tx) {\n    var elem, k, len2, results;\n    results = [];\n    for (k = 0, len2 = batchList.length; k < len2; k++) {\n      elem = batchList[k];\n      results.push(tx.addStatement(elem.sql, elem.params, null, null));\n    }\n    return results;\n  };\n  let mysuccess = function () {\n    if (!!success) {\n      return success();\n    }\n  };\n  let myerror = function (e) {\n    if (!!error) {\n      return error(e);\n    } else {\n      plugin.log(\"Error handler not provided: \", e);\n    }\n  };\n  this.addTransaction(new SQLitePluginTransaction(this, myfn, myerror, mysuccess, true, false));\n};\nSQLitePlugin.prototype.open = function (success, error) {\n  var openerrorcb, opensuccesscb;\n  if (this.dbname in this.openDBs && this.openDBs[this.dbname] === DB_STATE_OPEN) {\n    plugin.log(\"database already open: \" + this.dbname);\n    nextTick(function (_this) {\n      return function () {\n        success(_this);\n      };\n    }(this));\n  } else {\n    plugin.log(\"OPEN database: \" + this.dbname);\n    opensuccesscb = function (_this) {\n      return function () {\n        var txLock;\n        if (!_this.openDBs[_this.dbname]) {\n          plugin.log(\"database was closed during open operation\");\n        }\n        if (_this.dbname in _this.openDBs) {\n          _this.openDBs[_this.dbname] = DB_STATE_OPEN;\n        }\n        if (!!success) {\n          success(_this);\n        }\n        txLock = txLocks[_this.dbname];\n        if (!!txLock && txLock.queue.length > 0 && !txLock.inProgress) {\n          _this.startNextTransaction();\n        }\n      };\n    }(this);\n    openerrorcb = function (_this) {\n      return function () {\n        plugin.log(\"OPEN database: \" + _this.dbname + \" failed, aborting any pending transactions\");\n        if (!!error) {\n          error(newSQLError(\"Could not open database\"));\n        }\n        delete _this.openDBs[_this.dbname];\n        _this.abortAllPendingTransactions();\n      };\n    }(this);\n    this.openDBs[this.dbname] = DB_STATE_INIT;\n    plugin.exec(\"open\", this.openargs, opensuccesscb, openerrorcb);\n  }\n};\nSQLitePlugin.prototype.close = function (success, error) {\n  if (this.dbname in this.openDBs) {\n    if (txLocks[this.dbname] && txLocks[this.dbname].inProgress) {\n      plugin.log(\"cannot close: transaction is in progress\");\n      error(newSQLError(\"database cannot be closed while a transaction is in progress\"));\n      return;\n    }\n    plugin.log(\"CLOSE database: \" + this.dbname);\n    delete this.openDBs[this.dbname];\n    if (txLocks[this.dbname]) {\n      plugin.log(\"closing db with transaction queue length: \" + txLocks[this.dbname].queue.length);\n    } else {\n      plugin.log(\"closing db with no transaction lock state\");\n    }\n    let mysuccess = function (t, r) {\n      if (!!success) {\n        return success(r);\n      }\n    };\n    let myerror = function (t, e) {\n      if (!!error) {\n        return error(e);\n      } else {\n        plugin.log(\"Error handler not provided: \", e);\n      }\n    };\n    plugin.exec(\"close\", {\n      path: this.dbname\n    }, mysuccess, myerror);\n  } else {\n    var err = \"cannot close: database is not open\";\n    plugin.log(err);\n    if (error) {\n      nextTick(function () {\n        return error(err);\n      });\n    }\n  }\n};\nSQLitePlugin.prototype.attach = function (dbNameToAttach, dbAlias, success, error) {\n  if (this.dbname in this.openDBs) {\n    if (txLocks[this.dbname] && txLocks[this.dbname].inProgress) {\n      plugin.log(\"cannot attach: transaction is in progress\");\n      error(newSQLError(\"database cannot be attached while a transaction is in progress\"));\n      return;\n    }\n    plugin.log(\"ATTACH database \" + dbNameToAttach + \" to \" + this.dbname + \" with alias \" + dbAlias);\n    let mysuccess = function (t, r) {\n      if (!!success) {\n        return success(r);\n      }\n    };\n    let myerror = function (e) {\n      if (!!error) {\n        return error(e);\n      } else {\n        plugin.log(\"Error handler not provided: \", e);\n      }\n    };\n    plugin.exec(\"attach\", {\n      path: this.dbname,\n      dbName: dbNameToAttach,\n      dbAlias\n    }, mysuccess, myerror);\n  } else {\n    let err = \"cannot attach: database is not open\";\n    if (error) {\n      nextTick(function () {\n        return error(err);\n      });\n    }\n  }\n};\nSQLitePlugin.prototype.detach = function (dbAlias, success, error) {\n  if (this.dbname in this.openDBs) {\n    if (txLocks[this.dbname] && txLocks[this.dbname].inProgress) {\n      plugin.log(\"cannot attach: transaction is in progress\");\n      error(newSQLError(\"database cannot be attached while a transaction is in progress\"));\n      return;\n    }\n    plugin.log(\"DETACH database \" + dbAlias + \" from \" + this.dbname);\n    let mysuccess = function (t, r) {\n      if (!!success) {\n        return success(r);\n      }\n    };\n    let myerror = function (e) {\n      plugin.log(\"ERR\", e);\n      if (!!error) {\n        return error(e);\n      } else {\n        plugin.log(\"Error handler not provided: \", e);\n      }\n    };\n    this.executeSql(\"DETACH DATABASE \" + dbAlias, [], mysuccess, myerror);\n  } else {\n    var err = \"cannot attach: database is not open\";\n    plugin.log(err);\n    if (error) {\n      nextTick(function () {\n        return error(err);\n      });\n    }\n  }\n};\nSQLitePlugin.prototype.executeSql = function (statement, params, success, error) {\n  var myerror, myfn, mysuccess;\n  mysuccess = function (t, r) {\n    if (!!success) {\n      return success(r);\n    }\n  };\n  myerror = function (t, e) {\n    if (!!error) {\n      return error(e);\n    } else {\n      plugin.log(\"Error handler not provided: \", e);\n    }\n  };\n  myfn = function (tx) {\n    tx.addStatement(statement, params, mysuccess, myerror);\n  };\n  this.addTransaction(new SQLitePluginTransaction(this, myfn, null, null, false, false));\n};\nSQLitePluginTransaction = function (db, fn, error, success, txlock, readOnly) {\n  if (typeof fn !== \"function\") {\n    /*\n     This is consistent with the implementation in Chrome -- it\n     throws if you pass anything other than a function. This also\n     prevents us from stalling our txQueue if somebody passes a\n     false value for fn.\n     */\n    let err = newSQLError(\"transaction expected a function\");\n    if (!!error) {\n      return error(err);\n    } else {\n      throw err;\n    }\n  }\n  this.db = db;\n  this.fn = fn;\n  this.error = error;\n  this.success = success;\n  this.txlock = txlock;\n  this.readOnly = readOnly;\n  this.executes = [];\n  if (txlock) {\n    this.addStatement(\"BEGIN\", [], null, function (tx, err) {\n      throw newSQLError(\"unable to begin transaction: \" + err.message, err.code);\n    });\n  } else {\n    this.addStatement(\"SELECT 1\", [], null, null);\n  }\n};\nSQLitePluginTransaction.prototype.start = function () {\n  var err;\n  try {\n    this.fn(this);\n    this.run();\n  } catch (_error) {\n    err = _error;\n    txLocks[this.db.dbname].inProgress = false;\n    this.db.startNextTransaction();\n    if (this.error) {\n      this.error(newSQLError(err));\n    }\n  }\n};\nSQLitePluginTransaction.prototype.executeSql = function (sql, values, success, error) {\n  var that = this;\n  if (that.finalized) {\n    throw {\n      message: \"InvalidStateError: DOM Exception 11: This transaction is already finalized. Transactions are committed\" + \" after its success or failure handlers are called. If you are using a Promise to handle callbacks, be aware that\" + \" implementations following the A+ standard adhere to run-to-completion semantics and so Promise resolution occurs\" + \" on a subsequent tick and therefore after the transaction commits.\",\n      code: 11\n    };\n  }\n  if (that.readOnly && READ_ONLY_REGEX.test(sql)) {\n    that.handleStatementFailure(error, {\n      message: \"invalid sql for a read-only transaction\"\n    });\n    return;\n  }\n  let mysuccess = function (t, r) {\n    if (!!success) {\n      return success(t, r);\n    }\n  };\n  let myerror = function (t, e) {\n    if (!!error) {\n      return error(e);\n    } else {\n      plugin.log(\"Error handler not provided: \", e);\n    }\n  };\n  that.addStatement(sql, values, mysuccess, myerror);\n};\nSQLitePluginTransaction.prototype.addStatement = function (sql, values, success, error) {\n  var j, len1, params, sqlStatement, t, v;\n  sqlStatement = typeof sql === \"string\" ? sql : sql.toString();\n  params = [];\n  if (!!values && values.constructor === Array) {\n    for (j = 0, len1 = values.length; j < len1; j++) {\n      v = values[j];\n      t = typeof v;\n      if (v === null || v === void 0 || t === \"number\" || t === \"string\") {\n        params.push(v);\n      } else if (t === \"boolean\") {\n        //Convert true -> 1 / false -> 0\n        params.push(~~v);\n      } else if (t !== \"function\") {\n        params.push(v.toString());\n        plugin.warn(\"addStatement - parameter of type <\" + t + \"> converted to string using toString()\");\n      } else {\n        let errorMsg = \"Unsupported parameter type <\" + t + \"> found in addStatement()\";\n        plugin.error(errorMsg);\n        error(newSQLError(errorMsg));\n        return;\n      }\n    }\n  }\n  this.executes.push({\n    success: success,\n    error: error,\n    sql: sqlStatement,\n    params: params\n  });\n};\nSQLitePluginTransaction.prototype.handleStatementSuccess = function (handler, response) {\n  // plugin.log(\"handler response:\",response,response.rows);\n  var payload, rows;\n  if (!handler) {\n    return;\n  }\n  rows = response.rows || [];\n  // plugin.log(\"handler rows now:\",rows);\n  payload = {\n    rows: {\n      item: function (i) {\n        return rows[i];\n      },\n      /**\n       * non-standard Web SQL Database method to expose a copy of raw results\n       * @return {Array}\n       */\n      raw: function () {\n        return rows.slice();\n      },\n      length: rows.length\n    },\n    rowsAffected: response.rowsAffected || 0,\n    insertId: response.insertId || void 0\n  };\n  // plugin.log(\"handler response payload:\",payload);\n  handler(this, payload);\n};\nSQLitePluginTransaction.prototype.handleStatementFailure = function (handler, response) {\n  if (!handler) {\n    throw newSQLError(\"a statement with no error handler failed: \" + response.message, response.code);\n  }\n  if (handler(this, response) !== false) {\n    throw newSQLError(\"a statement error callback did not return false: \" + response.message, response.code);\n  }\n};\nSQLitePluginTransaction.prototype.run = function () {\n  var batchExecutes, handlerFor, i, callbacks, request, tropts, tx, txFailure, waiting;\n  txFailure = null;\n  tropts = [];\n  batchExecutes = this.executes;\n  waiting = batchExecutes.length;\n  this.executes = [];\n  tx = this;\n  handlerFor = function (index, didSucceed) {\n    return function (response) {\n      if (!txFailure) {\n        try {\n          if (didSucceed) {\n            tx.handleStatementSuccess(batchExecutes[index].success, response);\n          } else {\n            tx.handleStatementFailure(batchExecutes[index].error, newSQLError(response));\n          }\n        } catch (err) {\n          let errorMsg = JSON.stringify(err);\n          if (errorMsg === \"{}\") errorMsg = err.toString();\n          plugin.log(\"warning - exception while invoking a callback: \" + errorMsg);\n        }\n        if (!didSucceed) {\n          txFailure = newSQLError(response);\n        }\n      }\n      if (--waiting === 0) {\n        if (txFailure) {\n          tx.executes = [];\n          tx.abort(txFailure);\n        } else if (tx.executes.length > 0) {\n          tx.run();\n        } else {\n          tx.finish();\n        }\n      }\n    };\n  };\n  i = 0;\n  callbacks = [];\n  while (i < batchExecutes.length) {\n    request = batchExecutes[i];\n    callbacks.push({\n      success: handlerFor(i, true),\n      error: handlerFor(i, false)\n    });\n    tropts.push({\n      qid: 1111,\n      sql: request.sql,\n      params: request.params\n    });\n    i++;\n  }\n  let mysuccess = function (result) {\n    var j, last, q, r, res, type;\n    if (result.length === 0) {\n      return;\n    }\n    last = result.length - 1;\n    for (j = 0; j <= last; ++j) {\n      r = result[j];\n      type = r.type;\n      res = r.result;\n      q = callbacks[j];\n      if (q) {\n        if (q[type]) {\n          q[type](res);\n        }\n      }\n    }\n  };\n  var myerror = function (error) {\n    plugin.log(\"batch execution error: \", error);\n  };\n  plugin.exec(\"backgroundExecuteSqlBatch\", {\n    dbargs: {\n      dbname: this.db.dbname\n    },\n    executes: tropts\n  }, mysuccess, myerror);\n};\nSQLitePluginTransaction.prototype.abort = function (txFailure) {\n  var failed, succeeded, tx;\n  if (this.finalized) {\n    return;\n  }\n  tx = this;\n  succeeded = function (tx) {\n    txLocks[tx.db.dbname].inProgress = false;\n    tx.db.startNextTransaction();\n    if (tx.error) {\n      tx.error(txFailure);\n    }\n  };\n  failed = function (tx, err) {\n    txLocks[tx.db.dbname].inProgress = false;\n    tx.db.startNextTransaction();\n    if (tx.error) {\n      tx.error(newSQLError(\"error while trying to roll back: \" + err.message, err.code));\n    }\n  };\n  this.finalized = true;\n  if (this.txlock) {\n    this.addStatement(\"ROLLBACK\", [], succeeded, failed);\n    this.run();\n  } else {\n    succeeded(tx);\n  }\n};\nSQLitePluginTransaction.prototype.finish = function () {\n  var failed, succeeded, tx;\n  if (this.finalized) {\n    return;\n  }\n  tx = this;\n  succeeded = function (tx) {\n    txLocks[tx.db.dbname].inProgress = false;\n    tx.db.startNextTransaction();\n    if (tx.success) {\n      tx.success();\n    }\n  };\n  failed = function (tx, err) {\n    txLocks[tx.db.dbname].inProgress = false;\n    tx.db.startNextTransaction();\n    if (tx.error) {\n      tx.error(newSQLError(\"error while trying to commit: \" + err.message, err.code));\n    }\n  };\n  this.finalized = true;\n  if (this.txlock) {\n    this.addStatement(\"COMMIT\", [], succeeded, failed);\n    this.run();\n  } else {\n    succeeded(tx);\n  }\n};\nSQLitePluginTransaction.prototype.abortFromQ = function (sqlerror) {\n  if (this.error) {\n    this.error(sqlerror);\n  }\n};\ndblocations = {\n  \"default\": \"nosync\",\n  \"Documents\": \"docs\",\n  \"Library\": \"libs\",\n  \"Shared\": \"shared\"\n};\nSQLiteFactory = function () {};\nSQLiteFactory.prototype.DEBUG = function (debug) {\n  plugin.log(\"Setting debug to:\", debug);\n  plugin.sqlitePlugin.DEBUG = debug;\n};\nSQLiteFactory.prototype.sqliteFeatures = function () {\n  return {\n    isSQLitePlugin: true\n  };\n};\nSQLiteFactory.prototype.openDatabase = argsArray(function (args) {\n  var errorcb, first, okcb, openargs, readOnly;\n  if (args.length < 1) {\n    return null;\n  }\n  first = args[0];\n  openargs = null;\n  okcb = errorcb = () => {};\n  if (first.constructor === String) {\n    openargs = {\n      name: first,\n      dblocation: dblocations[\"default\"]\n    };\n    if (args.length >= 5) {\n      okcb = args[4];\n      if (args.length > 5) {\n        errorcb = args[5];\n      }\n    }\n  } else {\n    openargs = first;\n    readOnly = !!openargs.readOnly;\n    if (!readOnly && (!openargs.location || openargs.location.constructor !== String || !dblocations.hasOwnProperty(openargs.location))) {\n      openargs.dblocation = dblocations[\"default\"];\n    } else {\n      openargs.dblocation = dblocations[openargs.location];\n    }\n    if (!!openargs.createFromLocation) {\n      if (openargs.createFromLocation === 1) {\n        openargs.assetFilename = \"1\";\n      } else if (typeof openargs.createFromLocation === \"string\") {\n        openargs.assetFilename = openargs.createFromLocation;\n      }\n    }\n    if (!!openargs.androidDatabaseImplementation && openargs.androidDatabaseImplementation === 2) {\n      openargs.androidOldDatabaseImplementation = 1;\n    }\n    if (!!openargs.androidLockWorkaround && openargs.androidLockWorkaround === 1) {\n      openargs.androidBugWorkaround = 1;\n    }\n    if (args.length >= 2) {\n      okcb = args[1];\n      if (args.length > 2) {\n        errorcb = args[2];\n      }\n    }\n  }\n  return new SQLitePlugin(openargs, okcb, errorcb);\n});\nSQLiteFactory.prototype.echoTest = function (success, error) {\n  let inputTestValue = \"test-string\";\n  let mysuccess = function (testValue) {\n    if (testValue === inputTestValue) {\n      return success();\n    } else {\n      return error(`Mismatch: got: ${testValue} , expected: ${inputTestValue}`);\n    }\n  };\n  let myerror = function (e) {\n    return error(e);\n  };\n  plugin.exec(\"echoStringValue\", {\n    value: inputTestValue\n  }, mysuccess, myerror);\n};\nSQLiteFactory.prototype.deleteDatabase = function (first, success, error) {\n  var args = {};\n  if (first.constructor === String) {\n    args.path = first;\n    args.dblocation = dblocations[\"default\"];\n  } else {\n    if (!(first && first[\"name\"])) {\n      throw new Error(\"Please specify db name via name property\");\n    }\n    args.path = first.name;\n    if (!first.location || first.location.constructor !== String || !dblocations.hasOwnProperty(first.location)) {\n      args.dblocation = dblocations[\"default\"];\n    } else {\n      args.dblocation = dblocations[first.location];\n    }\n  }\n  let mysuccess = function (r) {\n    delete SQLitePlugin.prototype.openDBs[args.path];\n    if (!!success) {\n      return success(r);\n    }\n  };\n  let myerror = function (e) {\n    if (!!error) {\n      return error(e);\n    } else {\n      plugin.log(\"deleteDatabase error handler not provided: \", e);\n    }\n  };\n  plugin.exec(\"delete\", args, mysuccess, myerror);\n};\nplugin.sqlitePlugin = {\n  SQLiteFactory: SQLiteFactory,\n  SQLitePluginTransaction: SQLitePluginTransaction,\n  SQLitePlugin: SQLitePlugin,\n  log: plugin.log\n};\nmodule.exports = plugin.sqlitePlugin;","map":{"version":3,"names":["NativeModules","require","DB_STATE_INIT","DB_STATE_OPEN","READ_ONLY_REGEX","SQLiteFactory","SQLitePlugin","SQLitePluginTransaction","argsArray","dblocations","newSQLError","txLocks","plugin","error","code","sqlError","Error","message","JSON","stringify","nextTick","setImmediate","fun","setTimeout","global","window","args","i","len","arguments","length","call","exec","method","options","success","sqlitePlugin","DEBUG","log","messages","console","warn","openargs","openSuccess","openError","dbname","name","e","open","prototype","databaseFeatures","isSQLitePluginDatabase","openDBs","addTransaction","t","queue","inProgress","push","startNextTransaction","transaction","fn","readTransaction","self","_this","txLock","shift","start","abortAllPendingTransactions","j","len1","ref","tx","abortFromQ","sqlBatch","sqlStatements","batchList","myfn","st","constructor","Array","sql","params","elem","k","len2","results","addStatement","mysuccess","myerror","openerrorcb","opensuccesscb","close","r","path","err","attach","dbNameToAttach","dbAlias","dbName","detach","executeSql","statement","db","txlock","readOnly","executes","run","_error","values","that","finalized","test","handleStatementFailure","sqlStatement","v","toString","errorMsg","handleStatementSuccess","handler","response","payload","rows","item","raw","slice","rowsAffected","insertId","batchExecutes","handlerFor","callbacks","request","tropts","txFailure","waiting","index","didSucceed","abort","finish","qid","result","last","q","res","type","dbargs","failed","succeeded","sqlerror","debug","sqliteFeatures","isSQLitePlugin","openDatabase","errorcb","first","okcb","String","dblocation","location","hasOwnProperty","createFromLocation","assetFilename","androidDatabaseImplementation","androidOldDatabaseImplementation","androidLockWorkaround","androidBugWorkaround","echoTest","inputTestValue","testValue","value","deleteDatabase","module","exports"],"sources":["C:/Users/Miguel Corral/node_modules/react-native-sqlite-storage/lib/sqlite.core.js"],"sourcesContent":["/*\n * sqlite.ios.core.js\n *\n * Created by Andrzej Porebski on 10/29/15.\n * Copyright (c) 2015-2016 Andrzej Porebski.\n *\n * This software is largely based on the SQLLite Storage Cordova Plugin created by Chris Brody & Davide Bertola.\n * The implementation was adopted and converted to use React Native bindings.\n *\n * See https://github.com/litehelpers/Cordova-sqlite-storage\n *\n * This library is available under the terms of the MIT License (2008).\n * See http://opensource.org/licenses/alphabetical for full text.\n */\n\nvar NativeModules = require(\"react-native\").NativeModules;\nvar DB_STATE_INIT, DB_STATE_OPEN, READ_ONLY_REGEX, SQLiteFactory, SQLitePlugin, SQLitePluginTransaction, argsArray, dblocations, newSQLError, txLocks;\n\nvar plugin = {};\n\nREAD_ONLY_REGEX = /^(\\s|;)*(?:alter|create|delete|drop|insert|reindex|replace|update)/i;\n\nDB_STATE_INIT = \"INIT\";\n\nDB_STATE_OPEN = \"OPEN\";\n\ntxLocks = {};\n\nnewSQLError = function(error, code) {\n  var sqlError;\n  sqlError = error;\n  if (!code) {\n    code = 0;\n  }\n  if (!sqlError) {\n    sqlError = new Error(\"a plugin had an error but provided no response\");\n    sqlError.code = code;\n  }\n  if (typeof sqlError === \"string\") {\n    sqlError = new Error(error);\n    sqlError.code = code;\n  }\n  if (!sqlError.code && sqlError.message) {\n    sqlError.code = code;\n  }\n  if (!sqlError.code && !sqlError.message) {\n    sqlError = new Error(\"an unknown error was returned: \" + JSON.stringify(sqlError));\n    sqlError.code = code;\n  }\n  return sqlError;\n};\n\nlet nextTick = setImmediate ||  function(fun) {\n  setTimeout(fun, 0);\n};\n\nif (global.window) {\n  nextTick = window.setImmediate || function(fun) {\n    window.setTimeout(fun, 0);\n  };  \n}\n\n/*\n Utility that avoids leaking the arguments object. See\n https://www.npmjs.org/package/argsarray\n */\n\nargsArray = function(fun) {\n  return function() {\n    var args, i, len;\n    len = arguments.length;\n    if (len) {\n      args = [];\n      i = -1;\n      while (++i < len) {\n        args[i] = arguments[i];\n      }\n      return fun.call(this, args);\n    } else {\n      return fun.call(this, []);\n    }\n  };\n};\n\nplugin.exec = function(method, options, success, error) {\n  if (plugin.sqlitePlugin.DEBUG){\n    plugin.log(\"SQLite.\" + method + \"(\" + JSON.stringify(options) + \")\");\n  }\n  NativeModules[\"SQLite\"][method](options,success,error);\n};\n\nplugin.log = function(...messages) {\n  if (plugin.sqlitePlugin.DEBUG) {\n    console.log(...messages)\n  }\n}\n\nplugin.warn = function(...messages) {\n  console.warn(...messages)\n}\n\nplugin.error = function(...messages) {\n  console.error(...messages)\n}\n\nSQLitePlugin = function(openargs, openSuccess, openError) {\n  var dbname;\n  if (!(openargs && openargs[\"name\"])) {\n    throw newSQLError(\"Cannot create a SQLitePlugin db instance without a db name\");\n  }\n  dbname = openargs.name;\n  if (typeof dbname !== \"string\") {\n    throw newSQLError(\"sqlite plugin database name must be a string\");\n  }\n  this.openargs = openargs;\n  this.dbname = dbname;\n  this.openSuccess = openSuccess;\n  this.openError = openError;\n  this.openSuccess || (this.openSuccess = function() {\n    plugin.log(\"DB opened: \" + dbname);\n  });\n  this.openError || (this.openError = function(e) {\n    plugin.log(e.message);\n  });\n  this.open(this.openSuccess, this.openError);\n};\n\nSQLitePlugin.prototype.databaseFeatures = {\n  isSQLitePluginDatabase: true\n};\n\nSQLitePlugin.prototype.openDBs = {};\n\nSQLitePlugin.prototype.addTransaction = function(t) {\n  if (!txLocks[this.dbname]) {\n    txLocks[this.dbname] = {\n      queue: [],\n      inProgress: false\n    };\n  }\n  txLocks[this.dbname].queue.push(t);\n  if (this.dbname in this.openDBs && this.openDBs[this.dbname] !== DB_STATE_INIT) {\n    this.startNextTransaction();\n  } else {\n    if (this.dbname in this.openDBs) {\n      plugin.log(\"new transaction is waiting for open operation\");\n    } else {\n      plugin.log(\"database is closed, new transaction is [stuck] waiting until db is opened again!\");\n    }\n  }\n};\n\nSQLitePlugin.prototype.transaction = function(fn, error, success) {\n  if (!this.openDBs[this.dbname]) {\n    error(newSQLError(\"database not open\"));\n    return;\n  }\n  this.addTransaction(new SQLitePluginTransaction(this, fn, error, success, true, false));\n};\n\nSQLitePlugin.prototype.readTransaction = function(fn, error, success) {\n  if (!this.openDBs[this.dbname]) {\n    error(newSQLError(\"database not open\"));\n    return;\n  }\n  this.addTransaction(new SQLitePluginTransaction(this, fn, error, success, false, true));\n};\n\nSQLitePlugin.prototype.startNextTransaction = function() {\n  var self;\n  self = this;\n  nextTick((function(_this) {\n    return function() {\n      var txLock;\n      if (!(_this.dbname in _this.openDBs) || _this.openDBs[_this.dbname] !== DB_STATE_OPEN) {\n        plugin.log(\"cannot start next transaction: database not open\");\n        return;\n      }\n      txLock = txLocks[self.dbname];\n      if (!txLock) {\n        plugin.log(\"cannot start next transaction: database connection is lost\");\n      } else if (txLock.queue.length > 0 && !txLock.inProgress) {\n        txLock.inProgress = true;\n        txLock.queue.shift().start();\n      }\n    };\n  })(this));\n};\n\nSQLitePlugin.prototype.abortAllPendingTransactions = function() {\n  var j, len1, ref, tx, txLock;\n  txLock = txLocks[this.dbname];\n  if (!!txLock && txLock.queue.length > 0) {\n    ref = txLock.queue;\n    for (j = 0, len1 = ref.length; j < len1; j++) {\n      tx = ref[j];\n      tx.abortFromQ(newSQLError(\"Invalid database handle\"));\n    }\n    txLock.queue = [];\n    txLock.inProgress = false;\n  }\n};\n\nSQLitePlugin.prototype.sqlBatch = function(sqlStatements, success, error) {\n  var batchList, j, len1, myfn, st;\n  if (!sqlStatements || sqlStatements.constructor !== Array) {\n    throw newSQLError(\"sqlBatch expects an array\");\n  }\n  batchList = [];\n  for (j = 0, len1 = sqlStatements.length; j < len1; j++) {\n    st = sqlStatements[j];\n    if (st.constructor === Array) {\n      if (st.length === 0) {\n        throw newSQLError(\"sqlBatch array element of zero (0) length\");\n      }\n      batchList.push({\n        sql: st[0],\n        params: st.length === 0 ? [] : st[1]\n      });\n    } else {\n      batchList.push({\n        sql: st,\n        params: []\n      });\n    }\n  }\n  myfn = function(tx) {\n    var elem, k, len2, results;\n    results = [];\n    for (k = 0, len2 = batchList.length; k < len2; k++) {\n      elem = batchList[k];\n      results.push(tx.addStatement(elem.sql, elem.params, null, null));\n    }\n    return results;\n  };\n  let mysuccess = function() {\n    if (!!success) {\n      return success();\n    }\n  };\n  let myerror = function(e) {\n    if (!!error) {\n      return error(e);\n    } else {\n      plugin.log(\"Error handler not provided: \",e);\n    }\n  };\n\n  this.addTransaction(new SQLitePluginTransaction(this, myfn, myerror, mysuccess, true, false));\n};\n\n\nSQLitePlugin.prototype.open = function(success, error) {\n  var openerrorcb, opensuccesscb;\n\n  if (this.dbname in this.openDBs && this.openDBs[this.dbname] === DB_STATE_OPEN) {\n    plugin.log(\"database already open: \" + this.dbname);\n    nextTick((function(_this) {\n      return function() {\n        success(_this);\n      };\n    })(this));\n  } else {\n    plugin.log(\"OPEN database: \" + this.dbname);\n    opensuccesscb = (function(_this) {\n      return function() {\n        var txLock;\n        if (!_this.openDBs[_this.dbname]) {\n          plugin.log(\"database was closed during open operation\");\n        }\n        if (_this.dbname in _this.openDBs) {\n          _this.openDBs[_this.dbname] = DB_STATE_OPEN;\n        }\n        if (!!success) {\n          success(_this);\n        }\n        txLock = txLocks[_this.dbname];\n        if (!!txLock && txLock.queue.length > 0 && !txLock.inProgress) {\n          _this.startNextTransaction();\n        }\n      };\n    })(this);\n    openerrorcb = (function(_this) {\n      return function() {\n        plugin.log(\"OPEN database: \" + _this.dbname + \" failed, aborting any pending transactions\");\n        if (!!error) {\n          error(newSQLError(\"Could not open database\"));\n        }\n        delete _this.openDBs[_this.dbname];\n        _this.abortAllPendingTransactions();\n      };\n    })(this);\n    this.openDBs[this.dbname] = DB_STATE_INIT;\n    plugin.exec(\"open\",this.openargs,opensuccesscb, openerrorcb);\n  }\n};\n\nSQLitePlugin.prototype.close = function(success, error) {\n  if (this.dbname in this.openDBs) {\n    if (txLocks[this.dbname] && txLocks[this.dbname].inProgress) {\n      plugin.log(\"cannot close: transaction is in progress\");\n      error(newSQLError(\"database cannot be closed while a transaction is in progress\"));\n      return;\n    }\n    plugin.log(\"CLOSE database: \" + this.dbname);\n    delete this.openDBs[this.dbname];\n    if (txLocks[this.dbname]) {\n      plugin.log(\"closing db with transaction queue length: \" + txLocks[this.dbname].queue.length);\n    } else {\n      plugin.log(\"closing db with no transaction lock state\");\n    }\n    let mysuccess = function(t, r) {\n      if (!!success) {\n        return success(r);\n      }\n    };\n    let myerror = function(t, e) {\n      if (!!error) {\n        return error(e);\n      } else {\n        plugin.log(\"Error handler not provided: \",e);\n      }\n    };\n    plugin.exec(\"close\",{path: this.dbname}, mysuccess, myerror);\n  } else {\n    var err = \"cannot close: database is not open\";\n    plugin.log(err);\n    if (error) {\n      nextTick(function() {\n        return error(err);\n      });\n    }\n  }\n};\n\nSQLitePlugin.prototype.attach = function(dbNameToAttach, dbAlias, success, error) {\n  if (this.dbname in this.openDBs) {\n    if (txLocks[this.dbname] && txLocks[this.dbname].inProgress) {\n      plugin.log(\"cannot attach: transaction is in progress\");\n      error(newSQLError(\"database cannot be attached while a transaction is in progress\"));\n      return;\n    }\n    plugin.log(\"ATTACH database \" + dbNameToAttach + \" to \" + this.dbname + \" with alias \" + dbAlias);\n\n    let mysuccess = function(t, r) {\n      if (!!success) {\n        return success(r);\n      }\n    };\n    let myerror = function(e) {\n      if (!!error) {\n        return error(e);\n      } else {\n        plugin.log(\"Error handler not provided: \",e);\n      }\n    };\n    plugin.exec(\"attach\",{path: this.dbname, dbName: dbNameToAttach, dbAlias}, mysuccess, myerror);\n  } else {\n    let err = \"cannot attach: database is not open\";\n    if (error) {\n      nextTick(function() {\n        return error(err);\n      });\n    }\n  }\n};\n\nSQLitePlugin.prototype.detach = function(dbAlias, success, error) {\n  if (this.dbname in this.openDBs) {\n    if (txLocks[this.dbname] && txLocks[this.dbname].inProgress) {\n      plugin.log(\"cannot attach: transaction is in progress\");\n      error(newSQLError(\"database cannot be attached while a transaction is in progress\"));\n      return;\n    }\n    plugin.log(\"DETACH database \" + dbAlias + \" from \" + this.dbname);\n\n    let mysuccess = function(t, r) {\n      if (!!success) {\n        return success(r);\n      }\n    };\n    let myerror = function(e) {\n      plugin.log(\"ERR\", e);\n      if (!!error) {\n        return error(e);\n      } else {\n        plugin.log(\"Error handler not provided: \",e);\n      }\n    };\n    this.executeSql(\"DETACH DATABASE \" + dbAlias, [], mysuccess, myerror)\n  } else {\n    var err = \"cannot attach: database is not open\";\n    plugin.log(err);\n    if (error) {\n      nextTick(function() {\n        return error(err);\n      });\n    }\n  }\n};\n\nSQLitePlugin.prototype.executeSql = function(statement, params, success, error) {\n  var myerror, myfn, mysuccess;\n  mysuccess = function(t, r) {\n    if (!!success) {\n      return success(r);\n    }\n  };\n  myerror = function(t, e) {\n    if (!!error) {\n      return error(e);\n    } else {\n      plugin.log(\"Error handler not provided: \",e);\n    }\n  };\n  myfn = function(tx) {\n    tx.addStatement(statement, params, mysuccess, myerror);\n  };\n  this.addTransaction(new SQLitePluginTransaction(this, myfn, null, null, false, false));\n};\n\nSQLitePluginTransaction = function(db, fn, error, success, txlock, readOnly) {\n  if (typeof fn !== \"function\") {\n    /*\n     This is consistent with the implementation in Chrome -- it\n     throws if you pass anything other than a function. This also\n     prevents us from stalling our txQueue if somebody passes a\n     false value for fn.\n     */\n    let err = newSQLError(\"transaction expected a function\");\n    if (!!error) {\n      return error(err);\n    } else {\n      throw err;\n    }\n  }\n  this.db = db;\n  this.fn = fn;\n  this.error = error;\n  this.success = success;\n  this.txlock = txlock;\n  this.readOnly = readOnly;\n  this.executes = [];\n  if (txlock) {\n    this.addStatement(\"BEGIN\", [], null, function(tx, err) {\n      throw newSQLError(\"unable to begin transaction: \" + err.message, err.code);\n    });\n  } else {\n    this.addStatement(\"SELECT 1\", [], null, null);\n  }\n};\n\nSQLitePluginTransaction.prototype.start = function() {\n  var err;\n  try {\n    this.fn(this);\n    this.run();\n  } catch (_error) {\n    err = _error;\n    txLocks[this.db.dbname].inProgress = false;\n    this.db.startNextTransaction();\n    if (this.error) {\n      this.error(newSQLError(err));\n    }\n  }\n};\n\nSQLitePluginTransaction.prototype.executeSql = function(sql, values, success, error) {\n  var that = this;\n  if (that.finalized) {\n    throw {\n      message: \"InvalidStateError: DOM Exception 11: This transaction is already finalized. Transactions are committed\" +\n      \" after its success or failure handlers are called. If you are using a Promise to handle callbacks, be aware that\" +\n      \" implementations following the A+ standard adhere to run-to-completion semantics and so Promise resolution occurs\" +\n      \" on a subsequent tick and therefore after the transaction commits.\",\n      code: 11\n    };\n  }\n  if (that.readOnly && READ_ONLY_REGEX.test(sql)) {\n    that.handleStatementFailure(error, {\n      message: \"invalid sql for a read-only transaction\"\n    });\n    return;\n  }\n  let mysuccess = function(t, r) {\n    if (!!success) {\n      return success(t,r);\n    }\n  };\n  let myerror = function(t, e) {\n    if (!!error) {\n      return error(e);\n    } else {\n      plugin.log(\"Error handler not provided: \",e);\n    }\n  };\n  that.addStatement(sql, values, mysuccess, myerror);\n};\n\nSQLitePluginTransaction.prototype.addStatement = function(sql, values, success, error) {\n  var j, len1, params, sqlStatement, t, v;\n  sqlStatement = typeof sql === \"string\" ? sql : sql.toString();\n  params = [];\n  if (!!values && values.constructor === Array) {\n    for (j = 0, len1 = values.length; j < len1; j++) {\n      v = values[j];\n      t = typeof v;\n      if (v === null || v === void 0 || t === \"number\" || t === \"string\"){\n        params.push(v);\n      } else if (t === \"boolean\") {\n        //Convert true -> 1 / false -> 0\n        params.push(~~v);\n      }\n      else if (t !== \"function\") {\n        params.push(v.toString());\n        plugin.warn(\"addStatement - parameter of type <\"+t+\"> converted to string using toString()\")\n      } else {\n        let errorMsg = \"Unsupported parameter type <\"+t+\"> found in addStatement()\";\n        plugin.error(errorMsg);\n        error(newSQLError(errorMsg));\n        return;\n      }\n    }\n  }\n  this.executes.push({\n    success: success,\n    error: error,\n    sql: sqlStatement,\n    params: params\n  });\n};\n\nSQLitePluginTransaction.prototype.handleStatementSuccess = function(handler, response) {\n  // plugin.log(\"handler response:\",response,response.rows);\n  var payload, rows;\n  if (!handler) {\n    return;\n  }\n  rows = response.rows || [];\n  // plugin.log(\"handler rows now:\",rows);\n  payload = {\n    rows: {\n      item: function(i) {\n        return rows[i];\n      },\n      /**\n       * non-standard Web SQL Database method to expose a copy of raw results\n       * @return {Array}\n       */\n      raw: function() {\n        return rows.slice();\n      },\n      length: rows.length\n    },\n    rowsAffected: response.rowsAffected || 0,\n    insertId: response.insertId || void 0\n  };\n  // plugin.log(\"handler response payload:\",payload);\n  handler(this, payload);\n};\n\nSQLitePluginTransaction.prototype.handleStatementFailure = function(handler, response) {\n  if (!handler) {\n    throw newSQLError(\"a statement with no error handler failed: \" + response.message, response.code);\n  }\n  if (handler(this, response) !== false) {\n    throw newSQLError(\"a statement error callback did not return false: \" + response.message, response.code);\n  }\n};\n\nSQLitePluginTransaction.prototype.run = function() {\n  var batchExecutes, handlerFor, i, callbacks, request, tropts, tx, txFailure, waiting;\n  txFailure = null;\n  tropts = [];\n  batchExecutes = this.executes;\n  waiting = batchExecutes.length;\n  this.executes = [];\n  tx = this;\n  handlerFor = function(index, didSucceed) {\n    return function(response) {\n      if (!txFailure) {\n        try {\n          if (didSucceed) {\n            tx.handleStatementSuccess(batchExecutes[index].success, response);\n          } else {\n            tx.handleStatementFailure(batchExecutes[index].error, newSQLError(response));\n          }\n        } catch (err) {\n          let errorMsg = JSON.stringify(err);\n          if(errorMsg === \"{}\") errorMsg = err.toString();\n          plugin.log(\"warning - exception while invoking a callback: \" + errorMsg);\n        }\n\n        if (!didSucceed) {\n          txFailure = newSQLError(response);\n        }\n      }\n      if (--waiting === 0) {\n        if (txFailure) {\n          tx.executes = [];\n          tx.abort(txFailure);\n        } else if (tx.executes.length > 0) {\n          tx.run();\n        } else {\n          tx.finish();\n        }\n      }\n    };\n  };\n  \n  i = 0;\n  callbacks = [];\n  while (i < batchExecutes.length) {\n    request = batchExecutes[i];\n    callbacks.push({\n      success: handlerFor(i, true),\n      error: handlerFor(i, false)\n    });\n    tropts.push({\n      qid: 1111,\n      sql: request.sql,\n      params: request.params\n    });\n    i++;\n  }\n\n  let mysuccess = function(result) {\n    var j, last, q, r, res, type;\n    if (result.length === 0){\n      return;\n    }\n    last = result.length - 1;\n    for (j = 0; j <= last; ++j) {\n      r = result[j];\n      type = r.type;\n      res = r.result;\n      q = callbacks[j];\n      if (q) {\n        if (q[type]) {\n          q[type](res);\n        }\n      }\n    }\n  };\n\n  var myerror = function(error) {\n    plugin.log(\"batch execution error: \",error);\n  };\n\n  plugin.exec(\"backgroundExecuteSqlBatch\",{\n    dbargs: {\n      dbname: this.db.dbname\n    },\n    executes: tropts\n  }, mysuccess, myerror);\n};\n\nSQLitePluginTransaction.prototype.abort = function(txFailure) {\n  var failed, succeeded, tx;\n  if (this.finalized) {\n    return;\n  }\n  tx = this;\n  succeeded = function(tx) {\n    txLocks[tx.db.dbname].inProgress = false;\n    tx.db.startNextTransaction();\n    if (tx.error) {\n      tx.error(txFailure);\n    }\n  };\n  failed = function(tx, err) {\n    txLocks[tx.db.dbname].inProgress = false;\n    tx.db.startNextTransaction();\n    if (tx.error) {\n      tx.error(newSQLError(\"error while trying to roll back: \" + err.message, err.code));\n    }\n  };\n  this.finalized = true;\n  if (this.txlock) {\n    this.addStatement(\"ROLLBACK\", [], succeeded, failed);\n    this.run();\n  } else {\n    succeeded(tx);\n  }\n};\n\nSQLitePluginTransaction.prototype.finish = function() {\n  var failed, succeeded, tx;\n  if (this.finalized) {\n    return;\n  }\n  tx = this;\n  succeeded = function(tx) {\n    txLocks[tx.db.dbname].inProgress = false;\n    tx.db.startNextTransaction();\n    if (tx.success) {\n      tx.success();\n    }\n  };\n  failed = function(tx, err) {\n    txLocks[tx.db.dbname].inProgress = false;\n    tx.db.startNextTransaction();\n    if (tx.error) {\n      tx.error(newSQLError(\"error while trying to commit: \" + err.message, err.code));\n    }\n  };\n  this.finalized = true;\n  if (this.txlock) {\n    this.addStatement(\"COMMIT\", [], succeeded, failed);\n    this.run();\n  } else {\n    succeeded(tx);\n  }\n};\n\nSQLitePluginTransaction.prototype.abortFromQ = function(sqlerror) {\n  if (this.error) {\n    this.error(sqlerror);\n  }\n};\n\ndblocations = {\n  \"default\" : \"nosync\",\n  \"Documents\" : \"docs\",\n  \"Library\" : \"libs\",\n  \"Shared\" : \"shared\"\n};\n\nSQLiteFactory = function(){};\n\nSQLiteFactory.prototype.DEBUG = function(debug) {\n  plugin.log(\"Setting debug to:\",debug);\n  plugin.sqlitePlugin.DEBUG = debug;\n};\n\nSQLiteFactory.prototype.sqliteFeatures = function() {\n  return {\n    isSQLitePlugin: true\n  };\n};\n\nSQLiteFactory.prototype.openDatabase = argsArray(function(args) {\n  var errorcb, first, okcb, openargs, readOnly;\n  if (args.length < 1) {\n    return null;\n  }\n  first = args[0];\n  openargs = null;\n  okcb = errorcb = () => {};\n  if (first.constructor === String) {\n    openargs = {\n      name: first,\n      dblocation : dblocations[\"default\"]\n    };\n    if (args.length >= 5) {\n      okcb = args[4];\n      if (args.length > 5) {\n        errorcb = args[5];\n      }\n    }\n  } else {\n    openargs = first;\n    readOnly = !!openargs.readOnly;\n    if (!readOnly && (!openargs.location || openargs.location.constructor !== String || !dblocations.hasOwnProperty(openargs.location))) {\n      openargs.dblocation = dblocations[\"default\"];\n    } else {\n      openargs.dblocation = dblocations[openargs.location];\n    }\n\n    if (!!openargs.createFromLocation) {\n      if (openargs.createFromLocation === 1) {\n        openargs.assetFilename = \"1\";\n      } else if (typeof openargs.createFromLocation === \"string\"){\n        openargs.assetFilename = openargs.createFromLocation;\n      }\n    }\n\n    if (!!openargs.androidDatabaseImplementation && openargs.androidDatabaseImplementation === 2) {\n      openargs.androidOldDatabaseImplementation = 1;\n    }\n\n    if (!!openargs.androidLockWorkaround && openargs.androidLockWorkaround === 1) {\n      openargs.androidBugWorkaround = 1;\n    }\n\n    if (args.length >= 2) {\n      okcb = args[1];\n      if (args.length > 2) {\n        errorcb = args[2];\n      }\n    }\n  }\n\n  return new SQLitePlugin(openargs, okcb, errorcb);\n});\n\nSQLiteFactory.prototype.echoTest = function(success, error) {\n  let inputTestValue = \"test-string\";\n  let mysuccess = function(testValue) {\n    if (testValue === inputTestValue) {\n      return success();\n    } else {\n      return error(`Mismatch: got: ${testValue} , expected: ${inputTestValue}`);\n    }\n  };\n  let myerror = function(e) {\n    return error(e);\n  };\n\n  plugin.exec(\"echoStringValue\",{value: inputTestValue}, mysuccess, myerror);\n};\n\nSQLiteFactory.prototype.deleteDatabase = function(first,success, error) {\n  var args = {};\n  if (first.constructor === String) {\n    args.path = first;\n    args.dblocation = dblocations[\"default\"];\n  } else {\n    if (!(first && first[\"name\"])) {\n      throw new Error(\"Please specify db name via name property\");\n    }\n    args.path = first.name;\n    if (!first.location || first.location.constructor !== String || !dblocations.hasOwnProperty(first.location)) {\n      args.dblocation = dblocations[\"default\"];\n    } else {\n      args.dblocation = dblocations[first.location];\n    }\n  }\n\n  let mysuccess = function(r) {\n    delete SQLitePlugin.prototype.openDBs[args.path];\n    if (!!success) {\n      return success(r);\n    }\n  };\n\n  let myerror = function(e) {\n    if (!!error) {\n      return error(e);\n    } else {\n      plugin.log(\"deleteDatabase error handler not provided: \",e);\n    }\n  };\n\n  plugin.exec(\"delete\",args,mysuccess,myerror);\n};\n\nplugin.sqlitePlugin = {\n  SQLiteFactory : SQLiteFactory,\n  SQLitePluginTransaction : SQLitePluginTransaction,\n  SQLitePlugin : SQLitePlugin,\n  log: plugin.log\n};\n\nmodule.exports = plugin.sqlitePlugin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}